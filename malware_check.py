# 500 requests per day and a rate of 4 requests per minute.
# The Public API must not be used in commercial products or services.
# The Public API must not be used in business workflows that do not contribute new files.
# You are not allowed to register multiple accounts to overcome the aforementioned limitations.

# You must register to VirusTotal to get yourself a personal API Key (see: Google)
# Create a file and put the key in it and specify the path + name as a second parameter when invoking class MalwareChecker
# My example:
# File is ".api_key" and I just pasted it inside as a single line

from virus_total_apis import PublicApi as VirusTotalPublicApi
import hashlib
import json


class MalwareChecker:
    def __init__(self, exe_file: str, api_key_file: str):
        self.exe_file = exe_file
        self.api_key_file = api_key_file

    def read_api_key(self):
        with open(self.api_key_file, "r") as api_file:
            self.api_key = api_file.read()

        return self.api_key.strip()

    def read_malware(self):
        with open(self.exe_file, "rb") as input_file:
            self.file_contents = input_file.read()
            self.file_contents = hashlib.md5(self.file_contents).hexdigest()
        
        return self.file_contents

    def submit_to_virustotal(self):
        self.vt = VirusTotalPublicApi(self.read_api_key())
        self.resp = self.vt.get_file_report(self.read_malware())
        self.data = json.dumps(self.resp, sort_keys=False, indent=4)
        return self.data

    def save_response(self, data):
        with open("response_" + str(self.exe_file) + ".json", "w") as outfile:
            outfile.write(self.data)

    def get_response(self, save_to_file=False):
        malware_data = self.read_malware()
        scan_results = self.submit_to_virustotal()

        if save_to_file == True:
            self.save_response(scan_results)

        json_data = json.loads(scan_results)
        total_scans = json_data["results"]["total"]
        positives = json_data["results"]["positives"]
        print(f"[+] Positives/Total: {round(positives/total_scans, 2)}%")


if __name__ == "__main__":
    test = MalwareChecker("example_files/JRuler.exe", ".api_key")
    test.get_response()
    
    ## output
    ## [+] Positives/Total: 0.06%